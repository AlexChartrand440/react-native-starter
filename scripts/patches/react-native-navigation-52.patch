From 71750da4205908c9a1a48119365d2eef1865fef4 Mon Sep 17 00:00:00 2001
From: Krystof Celba <krystof.celba@icloud.com>
Date: Tue, 23 Jan 2018 02:25:53 +0100
Subject: [PATCH 1/2] Add support for react-native 0.52.0

---
 .../controllers/NavigationActivity.java            |  6 ++
 .../react/JsDevReloadListenerReplacer.java         | 65 +++++++++++-----------
 2 files changed, 40 insertions(+), 31 deletions(-)

diff --git a/android/app/src/main/java/com/reactnativenavigation/controllers/NavigationActivity.java b/android/app/src/main/java/com/reactnativenavigation/controllers/NavigationActivity.java
index 946be939b..54eaaee8f 100644
--- a/android/app/src/main/java/com/reactnativenavigation/controllers/NavigationActivity.java
+++ b/android/app/src/main/java/com/reactnativenavigation/controllers/NavigationActivity.java
@@ -39,6 +39,7 @@
 import com.reactnativenavigation.screens.NavigationType;
 import com.reactnativenavigation.screens.Screen;
 import com.reactnativenavigation.utils.OrientationHelper;
+import com.reactnativenavigation.utils.ReflectionUtils;
 import com.reactnativenavigation.views.SideMenu.Side;

 import java.util.List;
@@ -455,6 +456,11 @@ private void postHandleJsDevReloadEvent() {
             public void run() {
                 layout.destroy();
                 modalController.destroy();
+
+                Object devSupportManager = ReflectionUtils.getDeclaredField(getReactGateway().getReactInstanceManager(), "mDevSupportManager");
+                if (ReflectionUtils.getDeclaredField(devSupportManager, "mRedBoxDialog") != null) {
+                    ReflectionUtils.setField(devSupportManager, "mRedBoxDialog", null);
+                }
             }
         });
     }
diff --git a/android/app/src/main/java/com/reactnativenavigation/react/JsDevReloadListenerReplacer.java b/android/app/src/main/java/com/reactnativenavigation/react/JsDevReloadListenerReplacer.java
index 70e7abdb7..d69a860e0 100644
--- a/android/app/src/main/java/com/reactnativenavigation/react/JsDevReloadListenerReplacer.java
+++ b/android/app/src/main/java/com/reactnativenavigation/react/JsDevReloadListenerReplacer.java
@@ -1,10 +1,12 @@
 package com.reactnativenavigation.react;

 import com.facebook.react.ReactInstanceManager;
-import com.facebook.react.bridge.JavaJSExecutor;
-import com.facebook.react.devsupport.ReactInstanceDevCommandsHandler;
 import com.reactnativenavigation.utils.ReflectionUtils;

+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
+import java.lang.reflect.Proxy;
+
 class JsDevReloadListenerReplacer {
     private final ReactInstanceManager reactInstanceManager;
     private final Listener listener;
@@ -19,49 +21,50 @@
     }

     void replace() {
-        ReactInstanceDevCommandsHandler originalHandler = getOriginalHandler();
-        DevCommandsHandlerProxy proxy = new DevCommandsHandlerProxy(originalHandler, listener);
-        replaceInReactInstanceManager(proxy);
-        replaceInDevSupportManager(proxy);
-    }
+        Object originalHandler = getOriginalHandler();

-    private void replaceInDevSupportManager(DevCommandsHandlerProxy proxy) {
         Object devSupportManager = ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevSupportManager");
-        ReflectionUtils.setField(devSupportManager, "mReactInstanceCommandsHandler", proxy);
-    }

-    private ReactInstanceDevCommandsHandler getOriginalHandler() {
-        return (ReactInstanceDevCommandsHandler) ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevInterface");
+        Object proxy = Proxy.newProxyInstance(
+                originalHandler.getClass().getClassLoader(),
+                originalHandler.getClass().getInterfaces(),
+                new DevCommandsHandlerProxy(originalHandler, listener));
+
+        if (ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevInterface") == null) {
+            ReflectionUtils.setField(devSupportManager, "mReactInstanceManagerHelper", proxy);
+        } else {
+            ReflectionUtils.setField(reactInstanceManager, "mDevInterface", proxy);
+            ReflectionUtils.setField(devSupportManager, "mReactInstanceCommandsHandler", proxy);
+        }
     }

-    private void replaceInReactInstanceManager(DevCommandsHandlerProxy proxy) {
-        ReflectionUtils.setField(reactInstanceManager, "mDevInterface", proxy);
+
+    private Object getOriginalHandler() {
+        Object devInterface = ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevInterface");
+        if (devInterface == null) {
+            Object devSupportManager = ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevSupportManager");
+            devInterface = ReflectionUtils.getDeclaredField(devSupportManager, "mReactInstanceManagerHelper");
+        }
+        return devInterface;
     }

-    private static class DevCommandsHandlerProxy implements ReactInstanceDevCommandsHandler {
-        private ReactInstanceDevCommandsHandler originalReactHandler;
+
+    private static class DevCommandsHandlerProxy implements InvocationHandler {
+        private Object originalReactHandler;
         private final Listener listener;

-        DevCommandsHandlerProxy(ReactInstanceDevCommandsHandler originalReactHandler, Listener listener) {
+        DevCommandsHandlerProxy(Object originalReactHandler, Listener listener) {
             this.originalReactHandler = originalReactHandler;
             this.listener = listener;
         }

         @Override
-        public void onReloadWithJSDebugger(JavaJSExecutor.Factory proxyExecutorFactory) {
-            listener.onJsDevReload();
-            originalReactHandler.onReloadWithJSDebugger(proxyExecutorFactory);
-        }
-
-        @Override
-        public void onJSBundleLoadedFromServer() {
-            listener.onJsDevReload();
-            originalReactHandler.onJSBundleLoadedFromServer();
-        }
-
-        @Override
-        public void toggleElementInspector() {
-            originalReactHandler.toggleElementInspector();
+        public Object invoke(Object proxy, Method method, Object[] args)
+                throws Throwable {
+            if (method.getName().equals("onJSBundleLoadedFromServer") || method.getName().equals("onReloadWithJSDebugger")) {
+                listener.onJsDevReload();
+            }
+            return method.invoke(originalReactHandler, args);
         }
     }
 }

From 07784a3e1fddcb1bd8be1eb543702209ac1718e9 Mon Sep 17 00:00:00 2001
From: Krystof Celba <krystof.celba@icloud.com>
Date: Sun, 28 Jan 2018 06:39:44 +0100
Subject: [PATCH 2/2] Refactore a bit

1. Rename `DevCommandsHandlerProxy` to `DevHelperProxy` so it reflects the changes in RN. See https://github.com/facebook/react-native/commit/d19afc73f5048f81656d0b4424232ce6d69a6368 .
2. Add few comments to show which code is used on `RN >= 0.52` and which on `RN <= 0.51`.
---
 .../controllers/NavigationActivity.java            |  2 +-
 .../react/JsDevReloadListenerReplacer.java         | 40 ++++++++++++----------
 2 files changed, 23 insertions(+), 19 deletions(-)

diff --git a/android/app/src/main/java/com/reactnativenavigation/controllers/NavigationActivity.java b/android/app/src/main/java/com/reactnativenavigation/controllers/NavigationActivity.java
index 54eaaee8f..f35e3a51d 100644
--- a/android/app/src/main/java/com/reactnativenavigation/controllers/NavigationActivity.java
+++ b/android/app/src/main/java/com/reactnativenavigation/controllers/NavigationActivity.java
@@ -458,7 +458,7 @@ public void run() {
                 modalController.destroy();

                 Object devSupportManager = ReflectionUtils.getDeclaredField(getReactGateway().getReactInstanceManager(), "mDevSupportManager");
-                if (ReflectionUtils.getDeclaredField(devSupportManager, "mRedBoxDialog") != null) {
+                if (ReflectionUtils.getDeclaredField(devSupportManager, "mRedBoxDialog") != null) { // RN >= 0.52
                     ReflectionUtils.setField(devSupportManager, "mRedBoxDialog", null);
                 }
             }
diff --git a/android/app/src/main/java/com/reactnativenavigation/react/JsDevReloadListenerReplacer.java b/android/app/src/main/java/com/reactnativenavigation/react/JsDevReloadListenerReplacer.java
index d69a860e0..1f3ae447c 100644
--- a/android/app/src/main/java/com/reactnativenavigation/react/JsDevReloadListenerReplacer.java
+++ b/android/app/src/main/java/com/reactnativenavigation/react/JsDevReloadListenerReplacer.java
@@ -21,50 +21,54 @@
     }

     void replace() {
-        Object originalHandler = getOriginalHandler();
+        Object originalHelper = getOriginalHelper();

         Object devSupportManager = ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevSupportManager");

         Object proxy = Proxy.newProxyInstance(
-                originalHandler.getClass().getClassLoader(),
-                originalHandler.getClass().getInterfaces(),
-                new DevCommandsHandlerProxy(originalHandler, listener));
+                originalHelper.getClass().getClassLoader(),
+                originalHelper.getClass().getInterfaces(),
+                new DevHelperProxy(originalHelper, listener));

-        if (ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevInterface") == null) {
+        if (ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevInterface") == null) { // RN >= 0.52
             ReflectionUtils.setField(devSupportManager, "mReactInstanceManagerHelper", proxy);
-        } else {
+        } else {                                                                                         // RN <= 0.51
             ReflectionUtils.setField(reactInstanceManager, "mDevInterface", proxy);
             ReflectionUtils.setField(devSupportManager, "mReactInstanceCommandsHandler", proxy);
         }
     }


-    private Object getOriginalHandler() {
+    private Object getOriginalHelper() {
         Object devInterface = ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevInterface");
-        if (devInterface == null) {
+
+        if (devInterface == null) { // RN >= 0.52
             Object devSupportManager = ReflectionUtils.getDeclaredField(reactInstanceManager, "mDevSupportManager");
-            devInterface = ReflectionUtils.getDeclaredField(devSupportManager, "mReactInstanceManagerHelper");
+            return ReflectionUtils.getDeclaredField(devSupportManager, "mReactInstanceManagerHelper");
         }
-        return devInterface;
+
+        return devInterface;        // RN <= 0.51
     }


-    private static class DevCommandsHandlerProxy implements InvocationHandler {
-        private Object originalReactHandler;
+    private static class DevHelperProxy implements InvocationHandler {
+        private Object originalReactHelper;
         private final Listener listener;

-        DevCommandsHandlerProxy(Object originalReactHandler, Listener listener) {
-            this.originalReactHandler = originalReactHandler;
+        DevHelperProxy(Object originalReactHelper, Listener listener) {
+            this.originalReactHelper = originalReactHelper;
             this.listener = listener;
         }

         @Override
-        public Object invoke(Object proxy, Method method, Object[] args)
-                throws Throwable {
-            if (method.getName().equals("onJSBundleLoadedFromServer") || method.getName().equals("onReloadWithJSDebugger")) {
+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
+            String methodName = method.getName();
+
+            if (methodName.equals("onJSBundleLoadedFromServer") || methodName.equals("onReloadWithJSDebugger")) {
                 listener.onJsDevReload();
             }
-            return method.invoke(originalReactHandler, args);
+
+            return method.invoke(originalReactHelper, args);
         }
     }
 }
